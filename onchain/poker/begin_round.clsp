(include *standard-cl-23*)

(import onchain.poker.mid_round exposing (program_hash as mid_hash))
(import std.assert)

; state is (minraise half_pot_size mover_image_Nplus1 waiter_image_N N)
; move is concatenation of mover_image_N and raise amount
; evidence is empty
(export (quine_hash (move new_validation_hash max_move_size mover_share previous_validation_hash 
    mover_puzzle_hash waiter_puzzle_hash amount timeout max_move_size referee_hash) 
    (minraise half_pot_size mover_image_Nplus1 waiter_image_N N) me mover_puzzle solution evidence)

    (if_any_fail
        (>= (strlen move) 32)
        (= max_move_size 32)
        (= mover_share (- (/ amount 2) half_pot))
        (assign
            raise_amount (substr move 32 (strlen move))
            mover_image_N (substr move 0 32)
            (if_any_fail
                (= waiter_image_Nplus1 (sha256 waiter_image_N))
                (>= raise_amount 0)
                (<= (+ half_pot_size raise_amount) (/ amount 2))
                (= new_validation_hash (sha256 mid_hash (shatree (li minraise half_pot_size raise_amount 
                    waiter_image_N mover_image_N N quine_hash))))
                0
                1
            )
        )
        0
        (x)
    )
)
