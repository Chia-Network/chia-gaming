(include *standard-cl-23*)

(import onchain.poker.end exposing (program_hash as end_hash))
(import std.assert)

; state is (minraise half_pot raise_amount mover_image_N waiter_image_N begin_round_hash)
; move is concatenation of mover_image_N and raise amount
; evidence is empty
(export (quine_hash (move new_validation_hash max_move_size mover_share previous_validation_hash 
    mover_puzzle_hash waiter_puzzle_hash amount timeout max_move_size referee_hash) 
    (minraise half_pot_size last_raise_amount mover_image_N waiter_image_N N begin_round_hash) me mover_puzzle solution evidence)

    (if (!= (strlen move) 32)
        (if_any_fail
            (= max_move_size 32)
            (= mover_share (- (/ amount 2) (+ half_pot raise_amount)))
            (= waiter_image_Nplus1 (sha256 waiter_image_N))
            (>= move minraise)
            (<= (+ half_pot_size raise_amount move) (/ amount 2))
            (= new_validation_hash (sha256 quine_hash (shatree (li minraise (half_pot_size raise_amount) move 
                waiter_image_N mover_image_N N begin_round_hash))))
            0
            (x)
        )
        (if_any_fail
            (= (sha256 move) mover_image_N)
            (= max_move_size 33)
            (= new_validation_hash 
                (if (= N 1)
                    (sha256 end_hash (shatree (li half_pot_size waiter_image_N move)))
                    (sha256 begin_round_hash (shatree (li minraise (+ half_pot_size last_raise_amount) 
                        waiter_image_N move (- N 1)))))
                )
            0
            (x)
        )
    )
)
