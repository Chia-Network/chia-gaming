(mod ((((alice_seed alice_commit) new_validation_hash) (ALICE_COMMIT BOB_SEED)) conditions)
    (include *standard-cl-22*)
    (include assert.clinc)
    (include shatree.clinc)
    (compile-file calpokerd calpokerd.clsp)
    (defconst dhash (shatree calpokerd))

    (defun make_cards (seed)
        (assign
            (handa newseed) (choose 52 8 (lsh seed -128))
            (handb newseed2) (choose (- 52 8) newseed)
            (list handa (mergeover handa handb))
        )
    )
    (defun mergeover (outer inner offset)
        (assign-inline first (+ (f inner) offset)
            (if (logand outer (<= (f outer) first))
                (mergeover (r outer) inner (+ offset 1))
                (if (not (r inner))
                    (c first outer)
                    (c first (mergeover outer (r inner) offset))
                )
            )
        )
    )
    (defun mergein (outer inner offset)
        (assign-inline first (+ (f inner) offset)
            (if (logand outer (<= (f outer) first))
                (c (f outer) (mergein (r outer) inner (+ offset 1)))
                (if (not (r inner))
                    (c first outer)
                    (c first (mergein outer (r inner) offset))
                )
            )
       )
    )
    (defun choose (numcards numchoose vals)
        (if (= numchoose 1)
            (assign (newvals card) (divmod vals numcards)
                (list (list card) newvals)
            )
            (assign 
                half (lsh numchoose -1)
                (cards1 newvals2) (choose numcards half vals)
                (cards2 newvals3) (choose (- numcards half) half newvals2)
                (list (mergein cards1 cards2 0) newvals3)
            )
        )
    )
    (assert
        (not
            (all
                (= (len alice_seed) 16)
                (= (sha256 alice_seed) ALICE_COMMIT)
                (= (len alice_commit) 32)
                (= new_validation (sha256 dhash (shatree (list (make_cards (sha256 alice_seed BOB_SEED)) alice_commit))))
            )
        )
        conditions
    )
)
