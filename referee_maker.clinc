(

; Identifier for a template is the shatree of everything after the drivers
; returns [(puzzle_hash amount first_player_handler second_player_handler initial_puzzle initial_first_player_share)]
; First player driver is my turn, second player driver is their turn type
; My turn driver takes (readable_move amount state entropy) and returns
;       (move validation_program validation_program_hash new_state max_move_size mover_share waiting_driver 
;       message_parser)
;       or nil for accept
; if waiting_driver is nil that means the last move is being made
; Message parsers take (message state amount) and return readable_info
;
; their turn driver takes (amount old_state move validation_info_hash max_move_size mover_share) and returns
;       (MAKE_MOVE readable_info moving_driver message) or 
;       (ACCEPT readable_info puzzle_reveal my_share) or
;       (SLASH evidence aggsig)
(defun make_referee_makers (my_turn_driver their_turn_driver whether_paired 
        initial_max_move_size initial_validator_program initial_validator_program_hash 
        initial_state initial_mover_share player_contribution
        timeout player_one_puzzle_hash player_two_puzzle_hash nonce)
    (assign 
        one_maker (lambda ((& initial_max_move_size initial_validator_program initial_validator_program_hash
            initial_state initial_mover_share my_turn_driver their_turn_driver nonce) 
            first_puzzle_hash second_puzzle_hash amount)
            (assign 
                initial_validation_info_hash (sha256 initial_validator_program_hash (shatree initial_state))
                initial_puzzle_hash (curry_to_hash player_one_puzzle_hash player_two_puzzle_hash timeout 
                    AMOUNT referee_hash nonce 0 initial_max_move_size initial_validation_info_hash 
                    initial_mover_share 0 referee_hash)
                initial_puzzle (curry player_one_puzzle_hash player_two_puzzle_hash timeout 
                    AMOUNT referee_hash nonce 0 initial_max_move_size initial_validation_info_hash 
                    initial_mover_share 0 referee)
                first_player_maker (curry initial_puzzle player_one_puzzle_hash player_two_puzzle_hash amount timeout nonce 
                    0 initial_validation_info_hash initial_mover_share initial_state my_turn_driver
                    my_turn_referee_maker)
                second_player_maker (curry player_two_puzzle_hash player_one_puzzle_hash amount timeout nonce 
                    0 initial_validation_info_hash initial_mover_share initial_max_move_size initial_puzzle initial_puzzle_hash 
                    initial_state their_turn_driver their_turn_referee_maker)
                (li initial_puzzle_hash amount first_player_maker second_player_maker initial_puzzle 
                    initial_mover_share)
            )
        )
        (if whether_paired
            (li (one_maker player_one_puzzle_hash player_two_puzzle_hash player_contribution) 
                (one_maker player_two_puzzle_hash player_one_puzzle_hash player_contribution))
            (li (one_maker player_one_puzzle_hash player_two_puzzle_hash (* 2 player_contribution)))
        )
    )
)

; returns (MOVE readable new_puzzle_hash my_turn_coin_handler message) or
;       (ACCEPT readable puzzle_reveal my_share)
;       (SLASH puzzle_reveal slashing_coin_solution agg_sig) or
;       (SLASHED)
;       (TIMEOUDOUT my_share)
; messages are optional and mostly used for early reveals of pre-commits
(defun their_turn_referee_maker (MY_INNER_PUZZLE_HASH THEIR_INNER_PUZZLE_HASH AMOUNT TIMEOUT NONCE MOVE PREV_VALIDATION_INFO_HASH 
        NEW_VALIDATION_INFO_HASH MOVER_SHARE MAX_MOVE_SIZE VALIDATION_PROGRAM VALIDATION_PROGRAM_HASH 
        STATE DRIVER my_inner_puzzle my_inner_solution_maker my_target_puzzle 
        ((first_type new_move new_validation_info_hash new_mover_share new_max_move_size)))
    (if (= first_type ASSERT_HEIGHT_RELATIVE)
        (li TIMEDOUT (- AMOUNT MOVER_SHARE))
        (not (isthere new_move))
        (li SLASHED)
        (assign
            new_puzzle (curry MY_INNER_PUZZLE_HASH THEIR_INNER_PUZZLE_HASH TIMEOUT AMOUNT referee_hash NONCE 
                new_move new_max_move_size new_validation_info_hash new_mover_share NEW_VALIDATION_INFO_HASH referee)
            new_puzzle_hash (curry_to_hash MY_INNER_PUZZLE_HASH THEIR_INNER_PUZZLE_HASH TIMEOUT AMOUNT referee_hash NONCE 
                new_move new_max_move_size new_validation_info_hash new_mover_share NEW_VALIDATION_INFO_HASH referee_hash)
            (slash_solution slash_aggsig) (a my_inner_solution_maker (li (li CREATE_COIN my_target_puzzle AMOUNT)))
            full_slash_solution (li STATE VALIDATION_PROGRAM my_inner_puzzle slash_solution 0)
            (returnval . exception) (run new_puzzle full_slash_solution)
            (if (not exception)
                (li SLASH new_puzzle full_slash_solution slash_aggsig)
                (assign
                    (move_type readable_info moving_driver message) (a (li AMOUNT STATE new_move 
                        new_validation_info_hash new_max_move_size new_mover_share) DRIVER)
                    (if (= move_type SLASH)
                        (li SLASH new_puzzle (li STATE VALIDATION_PROGRAM my_inner_puzzle 
                                slash_solution readable_info) (aggregate slash_aggsig moving_driver))
                        (= move_type ACCEPT)
                        (li ACCEPT readable_info new_puzzle new_mover_share)
                        (li MOVE readable_info new_puzzle_hash moving_driver message)
                    )
                )
            )
        )
    )
)

; returns (MOVE puzzle_reveal coin_solution agg_sig new_puzzle new_puzzle_hash new_coin_handler 
;       my_share message_parser) or
;       (ACCEPT puzzle_reveal my_share)
; In the move case if new_coin_handler is nil the timeout is clean and should be mutually agreeable
; message_parser takes a message and returns readable
; my_inner_solution_maker takes a shatree value of conditions and returns (solution aggsig)
(defun my_turn_referee_maker (PUZZLE_REVEAL MY_INNER_PUZZLE_HASH THEIR_INNER_PUZZLE_HASH AMOUNT 
        TIMEOUT NONCE MOVE NEW_VALIDATION_INFO_HASH MOVER_SHARE
        STATE DRIVER my_inner_puzzle my_inner_solution_maker readable_move entropy)
    (assign 
        (@ result (new_move new_validation_program new_validation_program_hash new_new_state 
                new_max_move_size new_mover_share waiting_driver inner_message_parser)) 
                (a DRIVER (li readable_move AMOUNT STATE entropy))
        (if (not result)
            (li ACCEPT PUZZLE_REVEAL MOVER_SHARE)
            (assign
                new_validation_info_hash (sha256 new_validation_program_hash (shatree new_new_state))
                new_puzzle_hash (curry_to_hash THEIR_INNER_PUZZLE_HASH MY_INNER_PUZZLE_HASH TIMEOUT 
                    AMOUNT referee_hash NONCE new_move new_max_move_size new_validation_info_hash 
                    new_mover_share NEW_VALIDATION_INFO_HASH referee_hash)
                new_puzzle (curry THEIR_INNER_PUZZLE_HASH MY_INNER_PUZZLE_HASH TIMEOUT 
                    AMOUNT referee_hash NONCE new_move new_max_move_size new_validation_info_hash 
                    new_mover_share NEW_VALIDATION_INFO_HASH referee)
                new_conditions (li (li CREATE_COIN new_puzzle_hash AMOUNT))
                (inner_solution inner_aggsig) (a my_inner_solution_maker new_conditions)
                new_solution (li new_move new_validation_info_hash 
                        new_mover_share new_max_move_size my_inner_puzzle inner_solution)
                new_coin_handler (curry MY_INNER_PUZZLE_HASH THEIR_INNER_PUZZLE_HASH AMOUNT TIMEOUT NONCE
                        new_move NEW_VALIDATION_INFO_HASH new_validation_info_hash new_mover_share 
                        new_max_move_size new_validation_program new_validation_program_hash new_new_state 
                        waiting_driver their_turn_referee_maker)
                message_parser (lambda ((& message_parser AMOUNT new_new_state) message) 
                        (a message_parser message new_new_state AMOUNT))
                (li MOVE PUZZLE_REVEAL new_solution inner_aggsig new_puzzle new_puzzle_hash 
                        new_coin_handler new_mover_share message_parser)
            )
        )
    )
)
)
