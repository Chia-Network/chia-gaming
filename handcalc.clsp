
; ranks are 0-12 with 1 being two, 11 being king, and 12 being ace
; suits are 0-3 with no particular labelling
; takes a list of cards (rank . suit) and returns the value of the best poker 
; hand which can be made with them
; returned list is hand type followed by cards in descending order
; doesn't work for ten or more cards if there are multiple flushes
; all sorting is done highest to lowest
(mod (cards)
    (include *standard-cl-22*)
    (include sort.clinc)
    (defconstant STRAIGHT_FLUSH 9)
    (defconstant FOUR_OF_A_KIND 8)
    (defconstant FULL_HOUSE 7)
    (defconstant FLUSH 6)
    (defconstant STRAIGHT 5)
    (defconstant THREE_OF_A_KIND 4)
    (defconstant TWO_PAIR 3)
    (defconstant PAIR 2)
    (defconstant HIGH_CARD 1)
    (defun list_less (lista listb)
        (if (not lista)
            1
            (if (< (f lista) (f listb))
                1
                (if > (f lista) (f listb)
                    0
                    (list_less (r lista) (r listb))
                )
            ) 
        )
    )
    (defun find_flush_inner (suits last count)
        (if (not suits)
            -1
            (if (= (f suits) last)
                (if (= count 4)
                    last
                    (find_flush (r suits) last (+ count 1))
                )
                (find_flush (r suits) (f suits) 1)
            )
        )
    )
    ; returns the flush suit or -1 if there isn't any
    (defun find_flush (suits)
        (find_flush_inner (sort < suits) 0 0)
    )
    (defun straight_high_inner (ranks started_ace last count)
        (if (not ranks)
            ; at the end of the list
            (if (& (not last) (= count 4) started_ace)
                ; ace to five
                3
                ; no straight
                0
            )
            (if (= last (f ranks))
                ; skip identical cards
                (straight_high (r ranks) started_ace last count)
                ; if the partial straight continues
                (if (= (f ranks) (- last 1))
                    (if (= count 4)
                        ; found a straight, add 3 to last because next and last are included
                        (+ last 3)
                        ; keep looking for a straight with the count going up by one
                        (straight_high (r ranks) started_ace (f ranks) (+ count 1))
                    )
                    ; reset the count
                    (straight_high (r ranks) started_ace (f ranks) 1)
                )
            )
        )
    )
    ; returns the high card of a straight or 0 if there isn't any
    (defun straight_high (ranks)
        (straight_high_inner (ranks (= (f ranks) 12) -1 0))
    )
    ; returns the first count elements of mylist
    (defun slice (mylist count)
        (if (not count)
            0
            (c (f mylist) (slice (r mylist) (- count 1)))
        )
    )
    (defun group_by_count_inner (items last count)
        (if (not items)
            0
            (if (= (f items) last)
                (group_by_count_inner (r items) last (+ count 1))
                (c (c count last) (group_by_count_inner (r items) (f items) 1))
            )
        )
    )
    (defun group_by_count (items)
        (assign s (sort < items)
            (group_by_count_inner s (f s) 0)
        )
    )
    (assign 
        fsuit (find_flush (map r cards))
        max_flush (if (= fsuit -1)
            0
            (assign 
                fnosuits (sort < (flatmap (lambda (& suit) (if (= (r card) suit) (f card) 0)) cards))
                fsh (straight_high fnosuits)
                (if fsh
                    (list STRAIGHT_FLUSH fsh)
                    (c FLUSH (slice fnosuits 5))
                )
            )
        )
        nosuits (sort < (map f cards))
        sh (straight_high nosuits)
        max_straight (if sh
            (list STRAIGHT sh)
            0
        )
        groups (sort list_less (group_by_count nosuits))
        (top_count . top_card) (f groups)
        (second_count . second_card) (f (r groups))
        topcards (lambda ((& groups) count) (map r (slice groups count))
        max_group (if (= top_count 1)
            (c HIGH_CARD (topcards 5))
            (if (= top_count 2)
                (if (= second_count 1)
                    (c PAIR (topcards 4))
                    (c TWO_PAIR (topcards 3))
                )
                (if (= top_count 3)
                    (if (= second_count 1)
                        (c THREE_OF_A_KIND (topcards 3))
                        (c FULL_HOUSE (topcards 2))
                    )
                    (c FOUR_OF_A_KIND (topcards 2))
                )
            )
        )
        (max list_less (list max_flush max_straight max_group))
    )
)
