# Thanks: clvm_rs' github actions.
name: Build

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}--${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/long_lived/')) && github.sha || '' }}
  cancel-in-progress: true

on:
  push:
    branches:
      - base
      - dev
  release:
    types: [published]
  pull_request:
    branches:
      - '**'

permissions:
  id-token: write
  contents: read

jobs:
  build_and_test:
    needs: [fmt, clippy, unit_tests]
    name: Build code on ${{ matrix.os }} py-${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python: [3.9, '3.10', 3.11, 3.12]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 1

    - uses: actions/setup-python@v5
      name: Install Python 3.9
      with:
        python-version: 3.9

    - uses: chia-network/actions/create-venv@main
      id: create-venv

    - name: Set up rust
      # See also rust-toolchain.toml
      uses: dtolnay/rust-toolchain@stable  # ${{ RUST_VERSION }}
      with:
        components: "clippy, rustfmt"
  fmt:
    runs-on: ubuntu-22.04
    name: cargo +stable fmt
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Install rust
        uses: dtolnay/rust-toolchain@1.89.0  # ${{ RUST_VERSION }}
        with:
          components: "clippy, rustfmt"
      - name: fmt
        run: |
          rustup component add --toolchain stable-x86_64-unknown-linux-gnu clippy rustfmt
          cargo +stable fmt --version
          cargo +stable fmt -- --files-with-diff --check

  clippy:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: dtolnay/rust-toolchain@1.89.0  # ${{ RUST_VERSION }}
        with:
          components: "clippy, rustfmt"
      - name: clippy
        run: |
          set -x
          rustup component add --toolchain stable-x86_64-unknown-linux-gnu clippy rustfmt
          cargo +stable clippy --version
          cargo +stable clippy --all --features=sim-tests -- -D warnings
          cargo +stable check --features=sim-tests --tests

  unit_tests:
    runs-on: ubuntu-22.04
    name: Unit tests
    needs: [fmt, clippy]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Install rust
        uses: dtolnay/rust-toolchain@stable  # ${{ RUST_VERSION }}
        with:
          components: "clippy, rustfmt"

      - uses: actions/setup-python@v5
        name: Install Python 3.9
        with:
          python-version: 3.9

      - uses: chia-network/actions/create-venv@main
        id: create-venv

      - name: Run rust tests and simulator tests
        run: |
          # We need chia-blockchain so we can run the blockchain simulator
          python -m pip install setuptools==75.0.0
          python -m pip install chia-blockchain==2.5.5-rc3
          # Try tests without sim-tests to ensure we're tracking build failures in that
          # configuration.  Also it's a lot shorter.
          cargo +stable test
          python -m pip install maturin==1.9.2
          maturin build --features sim-tests
          pip install `find . -name \*.whl`
          python -c "from chia_gaming import chia_gaming; chia_gaming.run_simulation_tests()"

  calpoker_onchain_tests:
    runs-on: ubuntu-22.04 # ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v5
        name: Install Python 3.9
        with:
          python-version: 3.9

      - name: Install uv
        run: |
          pip install uv==0.7.9

      - name: install chia_gaming into .venv
        run: |
          cd python
          uv venv
          uv pip install -e .
      - name: calpoker_onchain_tests
        run: |
          cd python
          source .venv/bin/activate
          cd tests
          # Note: 'cargo build' must have been run
          uv run compute_hashes.py
          uv run ./test_calpoker_validation.py

      - name: calpoker_handler tests
        run: |
          cd python
          source .venv/bin/activate
          cd tests
          # Note: 'cargo build' must have been run
          uv run compute_hashes.py
          uv run ./test_calpoker_handlers.py

  coverage:
    needs: unit_tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: dtolnay/rust-toolchain@stable  # ${{ RUST_VERSION }}
        with:
          components: "clippy, rustfmt"
      - name: Run for coverage
        run: |
          sudo apt-get update
          sudo apt-get install lcov -y
          rustup component add llvm-tools-preview
          cargo install --version 0.8.1 grcov
          export RUSTFLAGS="-Cinstrument-coverage"
          export LLVM_PROFILE_FILE=$(pwd)/target/clvm_tools_rs-%p-%m.profraw
          export CARGO_TARGET_DIR=$(pwd)/target
          python -m venv venv
          source venv/bin/activate
          pip install chia-blockchain==2.5.5-rc3
          python -m pip install maturin==1.9.2
          maturin build --features sim-tests
          pip install `find . -name \*.whl`
          python -c "from chia_gaming import chia_gaming; chia_gaming.run_simulation_tests()"
          grcov . --binary-path target -s . --branch --ignore-not-existing --ignore='*/.cargo/*' --ignore='*/tests/*' -o rust_cov.info
          python -c 'with open("rust_cov.info") as f: lines = [l for l in f if not (l.startswith("DA:") and int(l.split(",")[1].strip()) >= 2**63)]; open("lcov.info", "w").writelines(lines)'
      - name: Upload to Coveralls
        uses: coverallsapp/github-action@v2
        if: always()
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        with:
          coverage-reporter-version: v0.6.15
          path-to-lcov: './lcov.info'

  # m1 mac
  build_wheels:
    name: Build wheel on Mac M1
    needs: [unit_tests]
    runs-on: [MacOS, ARM64]
    strategy:
      fail-fast: false

    steps:
    - uses: Chia-Network/actions/clean-workspace@main

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 1

    - name: Install python
      uses: Chia-Network/actions/setup-python@main
      with:
        python-version: "3.10"

    - name: Set up rust
      run: |
        curl https://static.rust-lang.org/rustup/dist/aarch64-apple-darwin/rustup-init.sha256 | awk '{print $1 " *rustup-init"}' > checksum.txt
        curl -O https://static.rust-lang.org/rustup/dist/aarch64-apple-darwin/rustup-init
        cat checksum.txt
        shasum -a 256 -c checksum.txt

    - name: Install rust on mac
      run: |
        chmod +x rustup-init
        ./rustup-init -y || (echo "Rust is already installed. Exiting..." && exit 2)
        rm rustup-init checksum.txt
        echo 'export PATH=$HOME/.cargo/bin:$PATH' >> $HOME/.profile

    - name: Set up a venv for chia-blockchain
      run: |
        python3 -m venv test
        source ./test/bin/activate
        python -m pip install chia-blockchain==2.5.5-rc3

    - name: Run tests
      run: |
        echo "PWD=$(pwd)"
        source ./test/bin/activate
        # "+stable" flag is not supported here yet
        cargo test
        python -m pip install maturin==1.9.2
        maturin build --features sim-tests
        pip install `find . -name \*.whl`
        python -c "from chia_gaming import chia_gaming; chia_gaming.run_simulation_tests()"

    - name: Build Docker Images
      run: bash -x build-docker-images.sh

  build_npm:
    name: Npm
    runs-on: ubuntu-latest
    needs: [unit_tests, build_and_test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set Env
        uses: Chia-Network/actions/setjobenv@main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up rust
        # See also rust-toolchain.toml
        uses: dtolnay/rust-toolchain@1.89.0  # ${{ RUST_VERSION }}
        with:
          components: "clippy, rustfmt"

      - name: do wasm tests in frontend
        run: |
         docker build -t chia-gaming-test .
         docker run -t chia-gaming-test /app/test.sh
