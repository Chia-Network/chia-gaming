import { useState } from 'react';
import { useJsonRpc } from './JsonRpcContext';

export function useWalletConnectCalls() {
    const rpc = useJsonRpc();

    const [responseData, setResponseData] = useState<any>(null);

    const [fingerprint, setFingerprint] = useState(0);
    const [fingerprints, setFingerprints] = useState<string>('');
    const [amount, setAmount] = useState(0);
    const [count, setCount] = useState(1);
    const [fee, setFee] = useState(0);
    const [number, setNumber] = useState(50);
    const [index, setIndex] = useState(0);
    const [startIndex, setStartIndex] = useState(0);
    const [endIndex, setEndIndex] = useState(50);
    const [backupDidsNeeded, setBackupDidsNeeded] = useState(0);

    const [name, setName] = useState('');
    const [message, setMessage] = useState('');
    const [did, setDid] = useState('');
    const [publicKey, setPublicKey] = useState('');
    const [signature, setSignature] = useState('');
    const [signingMode, setSigningMode] = useState('');
    const [address, setAddress] = useState('');
    const [sortKey, setSortKey] = useState('');
    const [offerData, setOfferData] = useState('');

    const [offer, setOffer] = useState('');
    const [driverDict, setDriverDict] = useState('');

    const [royaltyAddress, setRoyaltyAddress] = useState('');
    const [royaltyPercentage, setRoyaltyPercentage] = useState(0);
    const [targetAddress, setTargetAddress] = useState('');
    const [uris, setUris] = useState('');
    const [hash, setHash] = useState('');
    const [metaUris, setMetaUris] = useState('');
    const [metaHash, setMetaHash] = useState('');
    const [licenseUris, setLicenseUris] = useState('');
    const [licenseHash, setLicenseHash] = useState('');
    const [editionNumber, setEditionNumber] = useState(0);
    const [editionCount, setEditionCount] = useState(0);
    const [didId, setDidId] = useState('');

    const [walletId, setWalletId] = useState(0);
    const [transactionId, setTransactionId] = useState('');
    const [coinId, setCoinId] = useState('');
    const [launcherId, setLauncherId] = useState('');
    const [tradeId, setTradeId] = useState('');
    const [offerId, setOfferId] = useState('');
    const [assetId, setAssetId] = useState('');
    const [nftCoinIds, setNftCoinIds] = useState('');
    const [walletIds, setWalletIds] = useState('');
    const [backupDids, setBackupDids] = useState('');
    const [memos, setMemos] = useState('');

    const [includeData, setIncludeData] = useState(false);
    const [newAddress, setNewAddress] = useState(false);
    const [waitForConfirmation, setWaitForConfirmation] = useState(false);
    const [includeMyOffers, setIncludeMyOffers] = useState(false);
    const [includeTakenOffers, setIncludeTakenOffers] = useState(false);
    const [reverse, setReverse] = useState(false);
    const [disableJsonFormatting, setDisableJsonFormatting] = useState(false);
    const [validateOnly, setValidateOnly] = useState(false);
    const [secure, setSecure] = useState(false);
    const [nonObserverDerivation, setNonObserverDerivation] = useState(false);

    function handlePromise(promise: Promise<any>) {
        promise
            .then((data) => {
                console.log(data);
                setResponseData(data);
            })
            .catch((error) => {
                console.error(error);
                setResponseData({ error: error.message });
            });
    }

    const commands = {
        // Wallet
        chia_logIn: {
            args: {fingerprint, setFingerprint},
            call: () => rpc.logIn({ fingerprint }),
        }
    };
    {/*
        chia_getWallets: [
            booleanOption('Include Data', includeData, setIncludeData),
            submitButton('Get Wallets', () => rpc.getWallets({ includeData })),
        ],
        chia_getTransaction: [
            stringOption('Transaction Id', transactionId, setTransactionId),
            submitButton('Get Transaction', () =>
                rpc.getTransaction({ transactionId })
            ),
        ],
        chia_getWalletBalance: [
            numberOption('Wallet Id', walletId, setWalletId),
            submitButton('Get Wallet Balance', () =>
                rpc.getWalletBalance({ walletId })
            ),
        ],
        chia_getCurrentAddress: [
            numberOption('Wallet Id', walletId, setWalletId),
            submitButton('Get Current Address', () =>
                rpc.getCurrentAddress({ walletId })
            ),
        ],
        */
    }

    return { commands, responseData };
}
