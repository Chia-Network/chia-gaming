
(import games.calpoker-v1.onchain.a exposing (program as pokera) (program_hash as pokera_hash))
(import games.calpoker-v1.onchain.b exposing (program as pokerb) (program_hash as pokerb_hash))
(import games.calpoker-v1.onchain.c exposing (program as pokerc) (program_hash as pokerc_hash))
(import games.calpoker-v1.onchain.d exposing (program as pokerd) (program_hash as pokerd_hash))
(import games.calpoker-v1.onchain.e exposing (program as pokere) (program_hash as pokere_hash))

(import std.li)
(import std.curry)
(import std.map)
(import std.assert)
(import std.append)
(import std.relops)
(import std.list_compare)
(import std.deep_compare)
(import std.print)
(import games.calpoker-v1.handcalc exposing handcalc)
(import games.calpoker-v1.onchain.onehandcalc exposing onehandcalc)
(import games.calpoker-v1.game_codes)
(import games.calpoker-v1.onchain.make_card exposing make_card)
(import games.calpoker-v1.onchain.make_cards exposing make_cards)
(import games.calpoker-v1.onchain.arrange_cards exposing split_cards get_final_cards_in_canonical_order)

; game factory takes (alice_contribution bob_contribution) and returns
; (initial_mover_handler initial_waiter_handler whether_paired
; initial_max_move_size initial_state initial_mover_share
; (validator_hash validator validator_hash validator ...) first one is initial)
(defun calpoker_template (alice_contribution bob_contribution)
    (assert
        (= alice_contribution 1)
        (= bob_contribution 1)
        (li calpoker_alice_driver_a calpoker_bob_driver_a 0 32 0 0
            (pokera_hash pokera pokerb_hash pokerb pokerc_hash pokerc pokerd_hash pokerd pokere_hash pokere))
    )
)

; my turn handler takes (local_move pre_state amount entropy raw_amount) and
; returns (binary_move their_turn_handler mover_share message_parser)

; their turn handler takes (remote_move pre_state post_state mover_share amount raw_amount) and
; returns (readable_info my_turn_handler list_of_evidence message)

; state is empty
; local_move is nil
; makes a move using entropy
(defun calpoker_alice_driver_a (local_move pre_state amount entropy)
    (assign
        preimage (substr entropy 0 16)
        (list
            (sha256 preimage)
            (curry calpoker_alice_driver_b preimage local_move)
        )
    )
)

; state is alice's commit
; move is bob's seed
; immediately sends a message giving Alice's seed
(defun calpoker_alice_driver_b (PREIMAGE move pre_state post_state mover_share amount raw_amount)
    (list (make_cards (sha256 PREIMAGE move raw_amount))
          (curry calpoker_alice_driver_c PREIMAGE) 0 PREIMAGE)
)

(defun single-byte (raw-indices)
    (if raw-indices
        (assign
            indices-len (strlen raw-indices)
            (substr raw-indices (- indices-len 1) indices-len)
        )
        0x00
    )
)

(defun bitify (mylist)
    (single-byte
        (if (not mylist)
            0
            (logior (f mylist) (lsh (bitify (r mylist)) 1))
        )
    )
)

; state is alice's commit and bob's seed
; move is alice's reveal of her card generating seed and her commit to which cards she's picking
(defun calpoker_alice_driver_c (PREIMAGE my_discards (alice_commit bob_seed) amount entropy)
    (assign
        cards (make_cards (sha256 PREIMAGE bob_seed amount))
        salt (substr entropy 0 16)
        (list
            (concat PREIMAGE (sha256 (concat salt my_discards)))
            (curry calpoker_alice_driver_d salt my_discards)
        )
    )
)

(defun indices_to_bitfield_inner (mylist index)
    (if (not mylist)
        0
        (= (f mylist) index)
        (logior 1 (lsh (indices_to_bitfield_inner (r mylist) (+ index 1)) 1))
        (lsh (indices_to_bitfield_inner mylist (+ index 1)) 1)
    )
)

(defun indices_to_bitfield (mylist)
    (single-byte (indices_to_bitfield_inner mylist 0))
)

; We have composed cards as sublists but need them as pairs.
(defun card_list_to_pair ((rank suit)) (c rank suit))

; state is the cards for both players and alice's card pick commitment
; move is Bob's discards
; should immediately respond with a move revealing discards and selecting best cards and final split
(defun calpoker_alice_driver_d (MY_SALT MY_PICKS move pre_state
            (bob_discards alice_cards bob_cards my_commit))
    (assign
        (my_all_cards_indices bob_all_cards_indices) (get_final_cards_in_canonical_order
            alice_cards MY_PICKS bob_cards move) ;alice_cards alice_picks bob_cards bob_picks

        (my_all_cards . bob_all_cards)
            (c
               (map make_card my_all_cards_indices)
               (map make_card bob_all_cards_indices)
            )

        (my_hand_value my_selects) (handcalc (map card_list_to_pair my_all_cards))
        (bob_hand_value bob_selects) (handcalc (map card_list_to_pair bob_all_cards))
        ;; win_result is 1 if my_hand_value is greater than bob_hand_value
        win_result (list_compare my_hand_value bob_hand_value)
        ;; split is captured in a their turn handler below so it's the opposite of what
        ;; this turn would specify.
        split (- 1 win_result)
        (list
            (list
                move
                (indices_to_bitfield my_selects)
                (indices_to_bitfield bob_selects)
                my_hand_value
                bob_hand_value
                win_result
            )
            0
            (curry calpoker_alice_driver_e (concat MY_SALT MY_PICKS (single-byte (indices_to_bitfield my_selects))))
        )
    )
)

; alice makes a nil move to finish the game
(defun calpoker_alice_driver_e (MY_MOVE SHARE_RESULT local_move pre_state)
    (list
        MY_MOVE
        0
        SHARE_RESULT
    )
)

; state is empty
; move is alice commit to a salted word
(defun calpoker_bob_driver_a (move pre_state post_state)
    (list 0 calpoker_bob_driver_b)
)

; state is alice_commit
; move is bob_seed
(defun calpoker_bob_driver_b (local_move pre_state amount entropy)
    (assign
        seed (substr entropy 0 16)
        (list
            (substr entropy 0 16)
            calpoker_bob_driver_c
            0
            parse_message
        )
    )
)

(defun parse_message (message (alice_commit bob_seed) amount raw_amount)
    (assert
        (= (sha256 message) alice_commit)
        (= (strlen message) 16)
        (make_cards (sha256 message bob_seed raw_amount))
    )
)

; state is alice's commit and bob's seed
; move is alice's reveal of her card generating seed and her commit to which cards she's picking
; expecting a message revealing Alice's seed which results in local display once verified
(defun calpoker_bob_driver_c (move pre_state (alice_commit alice_cards bob_cards))
    (list
        (list alice_cards bob_cards)
        calpoker_bob_driver_d
    )
)

; state is ((alice_cards bob_cards) alice_pick_commitment)
; move is Bob's discards
(defun calpoker_bob_driver_d (bob_discards)
    (list
        bob_discards
        calpoker_bob_driver_e
    )
)

; state is (Bob's discards (alice_cards bob_cards) alice_commit)
; move is alice_salted_discards
; either fraud proves or accepts split
(defun calpoker_bob_driver_e
    (move (bob_discards alice_cards bob_cards) (alice_final_cards bob_final_cards alice_hand_value)
    split)
    (assign
        alice_discards (substr move 16 17)
        alice_selects (substr move 17 18)
        (bob_hand_value bob_selects) (handcalc (map card_list_to_pair (map make_card bob_final_cards)))
        binary_bob_selects (indices_to_bitfield bob_selects)
        (list
            (list alice_discards alice_selects binary_bob_selects alice_hand_value bob_hand_value)
            0
            (list binary_bob_selects)
        )
    )
)
