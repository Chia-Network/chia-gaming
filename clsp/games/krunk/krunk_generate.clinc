(export krunk_factory)
(import onchain.krunk.commit exposing commit_validate commit_validate_hash)
(import onchain.krunk.guess exposing guess)
(import onchain.krunk.clue exposing clue_validate)
(import std.assert)
(import std.shatree)
(import std.curry)

; game factory takes (alice_contribution bob_contribution) and returns
; (initial_mover_handler initial_waiter_handler
; initial_max_move_size initial_state initial_mover_share
; (validator_hash validator validator_hash validator ...) first one is initial)
(defun krunk_factory (alice_contribution bob_contribution)
    (assert
        (= alice_contribution 100)
        (= bob_contribution 0)
        (li alice_handler_commit bob_handler_commit 32 0 0
            (commit_validate_hash commit_validate guess_hash guess clue_hash clue))
    )
)

; my turn handler takes (local_move pre_state amount entropy raw_amount) and
; returns (binary_move their_turn_handler mover_share message_parser)

; their turn handler takes (remote_move pre_state post_state mover_share amount raw_amount) and
; returns (readable_info my_turn_handler list_of_evidence message)

; my turn handler
; local_move is the picked word. Needs to be in the dictionary
; checks that word is in dictionary
; next turn handler is a curried alice_handler_guess
(defun alice_handler_commit (local_move pre_state amount entropy raw_amount)
    (assert
        ; assert local_move is a word in the dictionary
        local_move_in_dictionary
        (assign
            salt (substr entropy 0 16)
            move (sha256 salt local_move raw_amount)
            (li move (curry alice_handler_guess salt move))
        )
    )
)

; their turn handler
; checks for Bob's guess being in dictionary
; readable_move is Bob's guess
; next turn handler is alice_handler_clue or nil if Bob guessed right or ran out of guesses
(defun alice_handler_guess (SALT WORD remote_move pre_state post_state mover_share)
    (assign
        evidence check_if_word_in_dictionary
        (if evidence
            (li 0 0 (li evidence))
            (assign
                clue (make_clue WORD remote_move)
                (li (li remote_move (expand_clue clue)) (curry alice_handler_clue SALT WORD clue))
            )
        )
    )
)

; my turn handler
; local_move is nil (should be called immediately)
; next turn handler is alice_handler_guess
(defun alice_handler_clue (SALT WORD CLUE local_move (bob_guesses alice_clues guess_validate_hash dictionary_key alice_commit)
        amount entropy raw_amount)
    (if (= CLUE right_word)
        (li (concat SALT WORD) 0 (index (li 100 100 20 5 1) (len alice_clues)))
        (= (len alice_clues 4))
        (li (concat SALT WORD) 0 0)
        (li CLUE (curry alice_handler_guess SALT WORD))
    )
)

; their turn handler
; no special checks
; readable_move is nil
; next turn handler is bob_handler_guess
(defun bob_handler_commit (remote_move pre_state post_state mover_share amount raw_amount)
    (li 0 bob_handler_guess)
)

; my turn handler
; local_move is a guess word. Needs to be in the dictionary
; next turn handler is bob_handler_clue
(defun bob_handler_guess (local_move pre_state amount entropy raw_amount)
    (assert
        (not (make_evidence my_dictionary local_move))
        (local_move bob_handler_clue)
    )
)

(defconst evidences (li 0x00 1 2 3 4))

; their turn handler
; when there's a reveal, special check is Alice's word being in dictionary
; when there's a reveal possible evidence is indices of alice clues
; readable_move is a clue and optionally a reveal of Alice's word if done
; next turn handler is bob_handler_guess or nil if done
(defun bob_handler_clue (remote_move (bob_guesses alice_clues guess_validate_hash dictionary_key alice_commit)
        post_state mover_share amount raw_amount)
    (if (= (len remote_move) 1)
        (li (expand_clue remote_move) bob_handler_guess)
        (assign
            word (substr remote_move 16 21)
            evidence (make_evidence my_dictionary word)
            (if evidence
                (li 0 0 (li evidence))
                (li (li word (make_clue word (f bob_guesses))) 0 evidences)
            )
        )
    )
)

; Alice gives wrong clue in each position with Bob guessing right in each position
; Alice commits to invalid word with correct clues and reveals in each position
; Alice tries to give Bob zero when he gets the last guess right
; Alice gives a clue out of range
; Alice gives a zero length clue
; Alice gives a too short reveal
; Bob guesses a too short word
