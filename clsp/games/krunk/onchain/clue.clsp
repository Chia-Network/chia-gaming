(include *standard-cl-23*)

(export clue_validate)
(import std.assert_fail)
(import onchain.krunk.krunk_make_clue exposing make_clue)

; Bob challenging
; state is (bob_guesses alice_clues guess_validate_hash dictionary_key alice_commit)
; move is an Alice clue or word reveal if hit
; evidence can be index where clue is wrong
; evidence can be exclusion range if Alice's committed word is not in the dictionary
(defun clue_validate (mod_hash
    (MOVER_PUZZLE_HASH WAITER_PUZZLE_HASH TIMEOUT AMOUNT MOD_HASH NONCE
        MOVE MAX_MOVE_SIZE VALIDATION_INFO_HASH MOVER_SHARE PREVIOUS_VALIDATION_INFO_HASH)
        (bob_guesses alice_clues guess_validate_hash . (@ tail (dictionary_public_key alice_commit)))
        previous_validation_program mover_puzzle solution evidence)

    (if (= (strlen MOVE)) 1
        ; alice gave a clue
        (if_any_fail
            (!= (len alice_clues) 4)
            (li SLASH 0)
            (li MAKE_MOVE guess_validate_hash (li bob_guesses (c MOVE alice_clues) &rest tail) 5)
        )
        ; alice did a reveal
        (if (= (strlen evidence) 1)
            ; index of wrong clue
            (assert
                (or
                    (and (> evidence 0) (= (index bob_guesses evidence) (substr MOVE 0 5)))
                    (!= (make_clue (index bob_guesses (+ evidence 1))) (index alice_clues evidence))
                )
                (li SLASH 0)
            )
            evidence
            ; alice's selected word was not in the dictionary
            (assert
                (>= (substr MOVE 0 5) (substr evidence 0 5))
                (<= (substr MOVE 0 5) (substr evidence 5 10))
                (li SLASH (li AGGSIG_UNSAFE dictionary_key evidence))
            )
            (if_any_fail
                (= (strlen MOVE) 21)
                (= alice_commit (sha256 MOVE AMOUNT))
                (= mover_share (* (/ AMOUNT 100) (index (len bob_guesses) (li 100 100 20 5 (= (substr MOVE 0 5) (f bob_guesses))))))
                (li SLASH 0)
                (li MAKE_MOVE 0 0 0)
            )
        )
    )
)
