
(include *standard-cl-23*)

(import onchain.poker.space_hand_eval exposing space_hand_eval)
(import std.assert)

; state is (units_on_table half_pot raise_amount mover_image waiter_preimage)
; move is concatenation of mover preimage and mover_selected_cards
; evidence is empty or waiter_selected_cards
(export (quine_hash
    (MOVER_PUZZLE_HASH WAITER_PUZZLE_HASH TIMEOUT AMOUNT MOD_HASH NONCE
        MOVE MAX_MOVE_SIZE VALIDATION_INFO_HASH MOVER_SHARE PREVIOUS_VALIDATION_INFO_HASH)
        (units_on_table half_pot_size mover_image waiter_preimage)
        previous_validation_program mover_puzzle solution evidence)

    (if_any_fail
        (= (strlen move) 33)
        (= mover_image (sha256 (substr move 0 32)))
        (list SLASH 0)
        (assign
            (@ cardinfo (mover_cards waiter_cards mover_boost waiter_boost))
                (make_all_cards (sha256 (substr move 0 32) AMOUNT) (sha256 waiter_preimage AMOUNT))
            mover_selected_cards (pull_from_bitfield mover_cards (substr move 32 33))
            (if (!= (len mover_selected_cards) 5)
                (list SLASH 0)
                (if (and (not evidence) (not WAITER_PUZZLE_HASH))
                    (list MAKE_MOVE 0 0 0)
                    (assign
                        mover_hand_value (space_hand_eval mover_selected_cards mover_boost)
                        waiter_selected_cards (pull_from_bitfield waiter_cards evidence)
                        (assert (= (len waiter_selected_cards) 5)
                            (if
                                (< MOVER_SHARE
                                    (-
                                        (/ AMOUNT 2)
                                        (*
                                            (/ AMOUNT units_on_table)
                                            half_pot_size
                                            (deep_compare
                                                mover_hand_value
                                                (space_hand_eval waiter_selected_cards waiter_boost)
                                            )
                                        )
                                    )
                                )
                                (list SLASH 0)
                                (list MAKE_MOVE 0 0 0)
                            )
                        )
                    )
                )
            )
        )
    )
)

(defun pull_from_bitfield (cards bitfield)
    (if (not cards) 0
        (assign remaining (pull_from_bitfield (r cards) (logrshift bitfield 1))
            (if (& bitfield 1)
                (c (f cards) remaining)
                remaining
            )
        )
    )
)

(defun make_all_cards (alice_pre bob_pre)
    (assign
        alice_image_1 (sha256 alice_pre)
        alice_image_2 (sha256 alice_image_1)
        alice_image_3 (sha256 alice_image_2)
        alice_image_4 (sha256 alice_image_3)
        bob_image_1 (sha256 bob_pre)
        bob_image_2 (sha256 bob_image_1)
        bob_image_3 (sha256 bob_image_2)
        bob_image_4 (sha256 bob_image_3)
        river_card (make_cards alice_image_3 bob_image_3 1)
        turn_card (make_cards alice_image_2 bob_image_2 1)
        flop_cards (make_cards alice_image_1 bob_image_1 3)
        (alice_hole_1 alice_hole_2) (make_cards alice_pre bob_image_4)
        (bob_hole_1 bob_hole_2) (make_cards bob_pre alice_image_4)
        community_cards (li river_card turn_card &rest flop_cards)
        alice_cards (li alice_hole_1 alice_hole_2 &rest community_cards)
        bob_cards (li bob_hole_1 bob_hole_2 &rest community_cards)
        alice_boost (not (% (sha256 (logxor alice_pre bob_image_4)) 3))
        bob_boost (not (% (sha256 (logxor bob_pre alice_image_4)) 3))
        (li alice_cards bob_cards alice_boost bob_boost)
    )
)

(defun make_cards (thing1 thing2 num_cards)
    (extract_cards (sha256 (logxor thing1 thing2)) num_cards)
)

(defun extract_cards (value num_cards)
    (if (not num_cards)
        0
        (assign
            (nextval next_card) (divmod value 13)
            (c (+ 2 next_card) (extract_cards nextval (- numcards 1)))
        )
    )
)