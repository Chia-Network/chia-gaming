(include *standard-cl-23*)

(import onchain.krunk.commit exposing commit_validate commit_validate_hash)
(import std.assert)
(import std.shatree)
(import std.curry)
(import std.li)

(defun krunk_factory (i_am_initiator my_contribution their_contribution params)
    (assert
        (= my_contribution their_contribution)
        (assign
            my_guess (list
                ; Amount
                (+ my_contribution their_contribution)
                ; My turn
                0
                ; Handler
                bob_driver_commit
                ; My contribution this game
                0
                ; Their contribution
                their_contribution
                ; Initial validation program
                commit_validate
                ; Hash of initial validator program
                commit_validate_hash
                ; Initial state
                0
                ; Initial move
                0
                ; Initial max move size
                32
                ; Initial mover share
                0
            )
            their_guess (li
                ; Amount
                (+ my_contribution their_contribution)
                ; My turn
                1
                ; Handler
                alice_driver_commit
                ; My contribution this game
                my_contribution
                ; Their contribution
                0
                ; Initial validation program
                commit_validate
                ; Hash of initial validator program
                commit_validate_hash
                ; Initial state
                0
                ; Initial move
                0
                ; Initial max move size
                32
                ; Initial mover share
                0
            )
            (if i_am_initiator (li my_guess their_guess) (li their_guess my_guess))
        )
    )
)


; their turn driver return value
; move type move, readable move, slash evidence to try, game handler, message
; move type slash, evidence

; my turn driver return value
; move, validation program, validation program hash, game handler, message parser

; my turn driver
; local_move is the picked word. Needs to be in the dictionary
; checks that word is in dictionary
; return move is a word commitment
; return validation program is krunk guess
; return validation program hash is krunk guess hash
; return game handler is alice_driver_guess with preimage curried in
; return message parser is skipped
(defun alice_driver_commit (local_move amount state mover_share entropy)
  ()
)

; their turn driver
; checks for Bob's guess being in dictionary
; readable_move is Bob's guess
; return move type is MOVE unless Bob guesses a word not in the dictionary in which case it's SLASH
; return readable move is opponent's move deconstructed to a clue
; return slash evidence is nil
; return game handler is alice_driver_clue with preimage curried
; return message parser is skipped
(defun alice_driver_guess (PREIMAGE amount before_state before_mover_share move after_mover_share)
  ()
)

; my turn driver
; local_move is nil (should be called immediately)
; if bob guessed right or ran out of guesses
;   return move is preimage
;   return validation program is nil
;   return validation program hash is nil
;   return game handler is skipped
;   return message parser is skipped
; return move is a clue
; return validation program is krunk guess unless bob guessed right or ran out of guesses in which case it's nil
; return split is 0 unless bob guessed right or ran out of guesses
; return max move size is
(defun alice_driver_clue (PREIMAGE local_move amount state mover_share entropy)
)

; their turn driver
; no special checks
; readable_move is nil
; next turn handler is bob_driver_guess
(defun bob_driver_commit (amount before_state before_mover_share move after_mover_share)
  ()
)

; my turn driver
; local_move is a guess word. Needs to be in the dictionary
; next turn handler is bob_driver_clue
(defun bob_driver_guess (local_move amount state mover_share entropy)
  ()
)

; their turn driver
; when there's a reveal, special check is Alice's word being in dictionary
; when there's a reveal possible evidence is indices of alice clues
; readable_move is a clue and optionally a reveal of Alice's word if done
; next turn handler is bob_driver_guess or nil if done
(defun bob_driver_clue (amount before_state before_mover_share move after_mover_share)
  ()
)
