;; Debug game handler
;;
;; The validation info hash result is the sha256 of the concatenation of two
;; hashes.
;;
;; 1 - A program which aborts if the move is a cheat.
;; 2 - The sha256tree of the program state.
;;
;; In the debug game, the whole state is described by the readable move data.

;; Curried = MOD_HASH PUZZLE AMOUNT MY_TURN SLASH_INFO

(include *standard-cl-23*)

(import std.curry)
(import std.map)
(import std.shatree)
(import std.condition_codes)
(import std.print)

;; Entire list is one of two parameters.
;; First one is the mod hash of the game handler.
;; Should ensure that mod hash becomes a separate parameter.
;;
;; One is the mod hash of the referee.
;; Other hash is the mod hash of the game handler.
(defmac CURRIED ()
  (q . (@ CURRIED
          (MOVER_PUZZLE_HASH
           WAITER_PUZZLE_HASH
           TIMEOUT
           AMOUNT
           MOD_HASH
           NONCE
           MOVE
           MAX_MOVE_SIZE
           VALIDATION_INFO_HASH
           MOVER_SHARE
           PREVIOUS_VALIDATION_INFO_HASH)
          )
     )
  )

(defun-inline curried_mod_hash ((CURRIED)) MOD_HASH)
(defun-inline curried_timeout ((CURRIED)) TIMEOUT)
(defun-inline curried_amount ((CURRIED)) AMOUNT)
(defun-inline curried_mover_puzzle_hash ((CURRIED)) MOVER_PUZZLE_HASH)

(defun-inline curried_other_turn ((CURRIED))
  (list
   MOVER_PUZZLE_HASH
   WAITER_PUZZLE_HASH
   TIMEOUT
   AMOUNT
   MOD_HASH
   NONCE
   MOVE
   MAX_MOVE_SIZE
   VALIDATION_INFO_HASH
   MOVER_SHARE
   PREVIOUS_VALIDATION_INFO_HASH
   )
  )


(defmac move-validation-info ()
  (q . (@ move-validation-info
          (new_move
           new_validation_info_hash
           new_mover_share
           new_max_move_size
           mover_puzzle
           solution)
          )
     )
  )

(defun get-validation-move ((move-validation-info)) new_move)
(defun get-validation-mover-puzzle ((move-validation-info)) mover_puzzle)
(defun get-validation-solution ((move-validation-info)) solution)
(defun get-validation-game-move ((move-validation-info))
  (list new_move new_validation_info_hash new_mover_share new_max_move_size)
  )

(defun get-move-share (new-move)
  (ash new-move -1)
  )

(defun validation_program (mod_hash (CURRIED) . validation-data)
  (assign

   cheated (logand (get-validation-move validation-data) 1)

   (if cheated
       (x "validation program cheating" validation-data)
       ()
       )
   )
  )

(defun do_my_turn (PUZZLE (CURRIED) readable_new_move amount split max_move_size entropy)
  (assign

   ;; Readable move is a clvm structure that describes the move
   ;; uncompressed.
   (set_share . set_cheated) readable_new_move

   ;; Validation info
   validation_info readable_new_move

   other_turn (curried_other_turn CURRIED)

   program-hash
     (curry_unhashed_args
        (curried_mod_hash other_turn)
        other_turn
        )

   new_state
     (c set_share set_cheated)

   new_validation_program_hash
     (sha256 program-hash (shatree new_state))

   val_program
   (curry PUZZLE 2 PUZZLE CURRIED)

   vph (shatree val_program)

   (list
    ;; Formatted move data
    (logior (logand 1 set_cheated) (ash set_share 1))

    ;; Validation program
    val_program
    vph

    ;; New state
    new_state
    ;; Max move size
    100
    ;; Mover share
    set_share
    ;; Their turn program
    (curry PUZZLE 0 PUZZLE other_turn)
    ()
    )
   )
  )

(defun do_their_turn (PUZZLE (CURRIED) amount last_state new_move new_validation_info_hash new_max_move_size new_mover_share)
  (assign
   set_cheated (logand new_move 1)
   set_share (get-move-share new_move)

   other_turn (curried_other_turn CURRIED)

   (if set_cheated
       (list 2 ())

       (list
        ;; Move type ok move == 0
        0
        ;; new readable move
        (c set_share set_cheated) ;; readable move
        ;; evidence if desired
        ()
        ;; new validation program
        (curry PUZZLE 1 PUZZLE other_turn)
        ;; output message
        "message data"
        )
       )
   )
  )

(export (MY_TURN PUZZLE (CURRIED) . args)
 (if
  ;; Validation personality
  (= MY_TURN 2)
  (validation_program &rest (print "validation args" args))

  ;; My turn personality
  (not MY_TURN)
  (do_their_turn PUZZLE CURRIED &rest (print "their turn args" args))

  ;; Their turn personality
  (do_my_turn PUZZLE CURRIED &rest (print "my turn args" args))
  )
 )
