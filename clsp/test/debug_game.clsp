(include *standard-cl-23*)

(import std.or)
(import std.and)
(import std.shatree)
(import std.curry)
(import std.print)
(import std.relops)
(import games.calpoker-v0.game_codes)

; See RefereePuzzleArgs::to_clvm
(defmac STATE_PACK ()
  (q @ state-pack
       (MOVER_PUZZLE_HASH
        WAITER_PUZZLE_HASH
        TIMEOUT
        AMOUNT
        MOD_HASH
        NONCE
        MOVE
        MAX_MOVE_SIZE
        INFOHASH_B
        MOVER_SHARE
        INFOHASH_A
        )
     )
  )

(defmac CURRY_PACK () (q @ curry-args (COUNT SELF_HASH SELF_PROG MOVER0 WAITER0)))

(defun curry-args-incr ((CURRY_PACK))
  (c (+ 1 COUNT) (r curry-args))
  )

(defun validator-hash ((CURRY_PACK))
  (curry_hashes_inline
   SELF_HASH
   (shatree "validator")
   (shatree curry-args)
   )
  )

(defun current-waiter-puzzle-hash ((CURRY_PACK))
  (if (logand COUNT 1) MOVER0 WAITER0)
  )

;; Every valid move encapsulates the entire set of data that the validator will be exposed
;; to.
;;
;; MOVE is the concatenation of all curried parameters except move followed by
;; - the shatree of previous validation program
;; - slashable
;;   a byte that is nonzero if the move is slashable.  the user must match this byte to slash.
;; - mover share
;;   the next mover share to return
(defun validator
    ((CURRY_PACK)
     mod_hash
     (STATE_PACK)
     state
     this_validation_program
     mover_puzzle
     solution
     evidence
     )
  (assign
   pv_hash (shatree (print "doing validation" this_validation_program))
   move-counter-data
   (concat
    ;; Hashes first
    MOVER_PUZZLE_HASH
    (if WAITER_PUZZLE_HASH WAITER_PUZZLE_HASH (current-waiter-puzzle-hash curry-args))
    MOD_HASH
    INFOHASH_B
    INFOHASH_A
    pv_hash
    ;; Then variable length stuff
    (byteify TIMEOUT)
    (byteify AMOUNT)
    (byteify NONCE)
    (byteify MAX_MOVE_SIZE)
    (byteify MOVER_SHARE)
    (byteify COUNT)
    )

   move-counter-data-len (strlen (print "move-counter-data?" move-counter-data))
   mover-puzzle-hash (substr move-counter-data 0 32)
   move-len (strlen (print "MOVE?" MOVE))

   (if
    (or
     ;; Too short move
     (print (list "have 2 or more bytes than move-counter-data-len which is" move-counter-data-len "have" (strlen MOVE)) (> move-counter-data-len (- (strlen MOVE) 2)))
     ;; Move doesn't repeat the counter data
     (print (list "did we reproduce the data" (substr MOVE 0 move-counter-data-len) "versus" move-counter-data) (not (= move-counter-data (substr MOVE 0 move-counter-data-len))))
     ;; Mover puzzle isn't the puzzle of the mover we think we have.
     ;; We can't actually check this because it relates to 'which user' is taking the action
     ;; not whose move it relates to.
     ;; (print "did we have the right mover puzzle" (not (= mover-puzzle-hash (shatree mover_puzzle))))
     ;;
     (print (list "INFOHASH_A " INFOHASH_A) 0)
     (print (list "INFOHASH_B " INFOHASH_B) 0)
     (print (list "INFOHASH_C " "NONE YET") 0)
     ;; check previous validation info hash
     (print (list "Previous infohash calculation: " (sha256 pv_hash (shatree state))) 0)
     (print "did we have the right previous validation info hash" (not (= INFOHASH_B (sha256 pv_hash (shatree state)))))
     ;;
     ;; the step we're on indicates mover0 or waiter0 as mover
     (print "did we send mover and waiter puzzle hash in the right order" (if (logand COUNT 1)
          (not (= MOVER_PUZZLE_HASH WAITER0))
          (not (= MOVER_PUZZLE_HASH MOVER0))
          ))
     ;; if mover and waiter are the same then things are broken
     (print "ensure we didn't just send the same puzzle hash for mover and waiter" (= MOVER_PUZZLE_HASH WAITER_PUZZLE_HASH))
     ;; the evidence is the slash
     (and
      (print (list "move-len" move-len) 1)
      (print (list "MOVE " MOVE) 1)
      (print (list "evidence" evidence) 1)
      (print "evidence was the same as the cheat in the move" (= evidence (substr MOVE (- move-len 1) move-len)))
      ;; Can't slash if the slash-byte is zero.
      (print "and it wasn't a zero byte which we can't slash" (+ 0 evidence))
      )
     )
    (list SLASH () "debug game: slash")
    (assign
     slashable-move (substr MOVE (- move-len 1) move-len)
     mover-share (+ 0 (substr MOVE (print "getting mover share" move-counter-data-len) (print "mover share ends at" (- move-len 1))))
     (list
      MAKE_MOVE
      (validator-hash (curry-args-incr curry-args))
      (list COUNT slashable-move mover-share)
      512
      (list "debug game: move with count" (+ COUNT 1) "slash hint" slashable-move "mover share" mover-share)
      )
     )
    )
   )
  )

;; Make a value be at least one byte.
(defun byteify (n) (i n n 0x00))

(defun myturn ((CURRY_PACK) local_move amount split entropy)
  ;; local move is a list of slashable and mover share
  (if (not (print (list "Curry pack:" curry-args) local_move))
      ;; () local move should make us emit a local slash so we can try that.
      (x "my turn local slash")
      ;; local move is a list of a prefix count slash byte and mover share
      (assign
       (prefix count mover-share slash) local_move
       incr-curry-args (curry-args-incr curry-args)
       (if (not (= count COUNT))
           (x "count not equal for this move" count COUNT)
           (list
            "debug game: move"
            ;; move bytes
            (concat prefix (byteify mover-share) slash)
            (curry SELF_PROG "validator" curry-args)
            (validator-hash curry-args)
            (curry SELF_PROG "validator" incr-curry-args)
            (validator-hash incr-curry-args)
            512
            mover-share
            (curry SELF_PROG "theirturn" incr-curry-args)
            )
           )
       )
      )
  )

(defun read-over-integer (s o p)
  (assign
   this-byte (substr s p (+ 1 p))
   ;; We're only looking for positive numbers
   (if (logand 0x80 this-byte)
       (read-over-integer s (concat this-byte o) (- p 1))
       (list (concat this-byte o) p)
       )
   )
  )

(defun theirturn
    ((CURRY_PACK)
     amount
     (@ state (count smove mshare))
     move
     validation_program_hash
     split
     )
  (assign
   move-len (strlen move)

   (if (> 1 move-len)
       (list SLASH ())
       ;; Skipping the last byte and the mover share, there should be a count.
       ;; It's fairly simple to read over a positive number.
       (assign
        slash-byte (substr move (- move-len 1) move-len)
        (mover-share count-pos) (print "mover share backup" (read-over-integer move "" (- move-len 2)))
        (move-count _) (print "move-count backup" (read-over-integer move "" (- count-pos 1)))
        (if (not (= (+ 0 move-count) COUNT))
            (x "their turn: mismatched count" (+ 0 move-count) COUNT)
            (not (= (validator-hash curry-args) validation_program_hash))
            (x "their turn: mismatched validator program")
            (not (= split (+ 0 mover-share)))
            (x "their turn: wrong mover share" (+ 0 mover-share) split)
            (not (= split mshare))
            (x "their turn: wrong mover share in state" mshare split)
            (not (= smove slash-byte))
            (x "their turn: wrong slash byte in state" smove slash-byte)
            (list
             MAKE_MOVE
             (list count smove mshare)
             (list slash-byte)
             (curry SELF_PROG "myturn" (curry-args-incr curry-args))
             )
            )
        )
       )
   )
  )

(defun factory (i_am_initiator my_contribution their_contribution (CURRY_PACK))
  (assign
   amount (+ my_contribution their_contribution)

   (if i_am_initiator
       (list
        ;; One game
        (list
         ;; amount
         amount

         ;; my turn
         1

         ;; handler
         (curry SELF_PROG "myturn" curry-args)

         my_contribution
         their_contribution

         ;; Initial validation program
         (curry SELF_PROG "validator" curry-args)

         (validator-hash curry-args)

         ;; Initial state: count slash mover-share
         (list () () ())

         ;; Initial move
         ()

         ;; Initial max move size
         512

         ;; Initial mover share
         0
         )
        )

       (list
        ;; One game
        (list
         ;; amount
         amount

         ;; their turn
         0

         ;; handler
         (curry SELF_PROG "theirturn" curry-args)

         my_contribution
         their_contribution

         ;; Initial validation program
         (curry SELF_PROG "validator" curry-args)

         (validator-hash curry-args)

         ;; Initial state: count slash mover-share
         (list () () ())

         ;; Initial move
         ()

         ;; Initial max move size
         512

         ;; Initail mover share
         0
         )
        )
       )
   )
  )

(export (MODE (CURRY_PACK) . args)
  (if (= (print "executing debug game with mode" MODE) "validator")
      (validator curry-args &rest args)
      (= MODE "myturn")
      (myturn curry-args &rest args)
      (= MODE "theirturn")
      (theirturn (print "their turn curry args" curry-args) &rest (print "passing on args to their turn" args))
      (= MODE "factory")
      (factory &rest args)
      (x "no such personality" MODE)
      )
  )
