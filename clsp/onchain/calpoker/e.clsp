(include *standard-cl-23*)

(import onchain.calpoker.onehandcalc)
(import onchain.calpoker.make_card)
(import onchain.calpoker.arrange_cards)
(import onchain.game_codes)
(import std.list_compare)
(import std.assert)
(import std.relops)
(import std.popcount)
(import std.if_any_fail)
(import std.and)

; Bob challenging
; state is (Bob's picks (alice_cards bob_cards) alice_commit)
; move is alice_salted_picks and alice's selections
; evidence is Bob's card selections
(export (mod_hash (old_state move next_validation_hash bob_share previous_validation_hash
    mover_puzzle_hash waiter_puzzle_hash amount timeout max_move_size referee_hash)
    (@ state (bob_picks (alice_cards bob_cards) alice_commit)) me previous_validation_program mover_puzzle solution bob_card_selections)
    (if (not (= (strlen move) 18))
        (list SLASH () "E slash wrong move size" move)

        bob_card_selections
        (assign
            alice_salted_picks (substr move 0 17)
            alice_picks (substr move 16 17)
            alice_card_selections (substr move 17 18)

            (alice_final_cards bob_final_cards) (split_cards_inner bob_picks bob_cards &rest (split_cards alice_picks alice_cards))

            result (list_compare (onehandcalc (pull_out_cards alice_card_selections alice_final_cards))
                                 (onehandcalc (pull_out_cards bob_card_selections bob_final_cards)))
            correct-mover-share
                (if_any_fail
                    (= (sha256 alice_salted_picks) alice_commit)
                    (= (popcount alice_picks) 4)
                    (<= bob_share
                        (if (not result)
                            (/ amount 2)
                            (if (= result 1)
                                amount
                                0
                            )
                        )
                    )
                    0
                    1
                )

            (if correct-mover-share
                (list MAKE_MOVE state 0 "E move evidence")
                (list SLASH () "E slash")
            )
        )

        ;; Otherwise
        (list MAKE_MOVE state 0 "E move")
    )
)
