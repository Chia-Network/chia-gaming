(include *standard-cl-23*)

(import onchain.calpoker.onehandcalc)
(import onchain.calpoker.arrange_cards)
(import onchain.calpoker.make_card)
(import onchain.game_codes)
(import std.list_compare)
(import std.assert)
(import std.relops)
(import std.popcount)
(import std.if_any_fail)
(import std.and)
(import std.or)
(import std.map)
(import std.li)
(import std.append)
(import std.print)

; Bob challenging
; state is (Bob's discards (alice_cards bob_cards) alice_commit)
; move is alice_salted_discards and alice's selections
; evidence is Bob's card selections

; TODO: move helper functions to another file
(defun list-to-pair ((a b)) (c a b))

(defun indices_to_bitfield_inner (mylist index)
    (if (not mylist)
        0
        (= (f mylist) index)
        (logior 1 (lsh (indices_to_bitfield_inner (r mylist) (+ index 1)) 1))
        (lsh (indices_to_bitfield_inner mylist (+ index 1)) 1)
    )
)

(defun single-byte (raw-indices)
    (if raw-indices
        (assign
            indices-len (strlen raw-indices)
            (substr raw-indices (- indices-len 1) indices-len)
        )
        0x00
    )
)

(defun indices_to_bitfield (mylist)
    (single-byte (indices_to_bitfield_inner mylist 0))
)

(defun does_alice_claim_small_enough (alice_hand_value bob_card_selections bob_final_cards mover_share amount)
    (assign
        bob_hand_value
            (onehandcalc
                (map
                    list-to-pair
                    (pull_out_cards
                         (print (list "bob_card_selections inside does_alice_claim_small_enough scope 3:" (@ 3)) bob_card_selections)
                         bob_final_cards
                    )
                )
            )
        result (print "alice v bob result" (list_compare alice_hand_value bob_hand_value))
        x (print "result " result)
        (>= (print "MOVER_SHARE" mover_share)
            (print "value compared to mover share"
            (if (not result)
                (/ amount 2)
                (if (= result 1)
                    0
                    amount
                )
            )
            )
        )
    )
)

(export (mod_hash
    (MOVER_PUZZLE_HASH WAITER_PUZZLE_HASH TIMEOUT AMOUNT MOD_HASH NONCE
        MOVE MAX_MOVE_SIZE VALIDATION_INFO_HASH MOVER_SHARE PREVIOUS_VALIDATION_INFO_HASH)
        (bob_discards alice_cards bob_cards alice_commit) previous_validation_program mover_puzzle solution bob_card_selections)
    (if (or
            (not (= (strlen MOVE) 18))
            ;; Common subexpression: (substr MOVE 16 17) == alice_discards
            (not (= (popcount (substr MOVE 16 17)) 4))
            ;; Common subexpression: (substr MOVE 16 17) == alice_card_selections
            (not (= (popcount (substr MOVE 17 18)) 5))
        )
        (list SLASH () "E slash wrong MOVE size" MOVE)

        (assign
            alice_salted_discards (substr MOVE 0 17)
            alice_discards (substr MOVE 16 17)
            alice_card_selections (substr MOVE 17 18)

            (alice_final_cards bob_final_cards) (print "these should be indices" (get_final_cards_in_canonical_order (print "alice pre picks cards" alice_cards) alice_discards (print "bob pre picks cards" bob_cards) bob_discards))
            alice_hand_value
                (print "alice onehandcalc" (onehandcalc
                    (print "pull out cards alice" (map list-to-pair (pull_out_cards (print "alice card selections" alice_card_selections) (print "alice final cards" alice_final_cards))))
                ))
            (if_any_fail
                (= (sha256 alice_salted_discards) alice_commit)
                (if (not (print "bob_card_selections scope 1:" bob_card_selections))
                    ;; Assert we aren't running on chain
                    (if WAITER_PUZZLE_HASH (x "On-chain, nil evidence") 1)
                    (does_alice_claim_small_enough alice_hand_value (print "should not get here right?" bob_card_selections) bob_final_cards MOVER_SHARE AMOUNT)
                )
                (list SLASH () "E slash")
                ; e.g. (() () (85 -8 2 (r 8 15 24 26 27 41 42) (a 2 1 14 8 12) (q 6 15 25 26 41 49 50) (x 14 24 27 38 42 48 51) ()) () "E move")

                ;; selections of both sides, value of both sides
                ; (alice hand - 5 cards) (bob hand - 5 cards) alice_hand_value bob_hand_value
                (list MAKE_MOVE 0 (li alice_discards alice_card_selections alice_cards bob_cards alice_final_cards bob_final_cards) 0 "E move")
                ;(list MAKE_MOVE 0 (li bob_discards alice_card_selections (indices_to_bitfield alice_cards)
                ;    bob_cards alice_hand_value alice_final_cards bob_final_cards MOVER_SHARE) 0 "E move")
            )
        )
    )
)
