(include *standard-cl-23*)

(import onchain.calpoker.onehandcalc)
(import onchain.calpoker.make_card)
(import onchain.calpoker.arrange_cards)
(import onchain.game_codes)
(import std.list_compare)
(import std.assert)
(import std.relops)
(import std.popcount)
(import std.if_any_fail)
(import std.and)
(import std.map)

; Bob challenging
; state is (Bob's picks (alice_cards bob_cards) alice_commit)
; move is alice_salted_picks and alice's selections
; evidence is Bob's card selections
(defun list-to-pair ((a b)) (c a b))

(defun indices_to_bitfield_inner (mylist index)
    (if (not mylist)
        0
        (= (f mylist) index)
        (logior 1 (lsh (indices_to_bitfield_inner (r mylist) (+ index 1)) 1))
        (lsh (indices_to_bitfield_inner mylist (+ index 1)) 1)
    )
)

(defun single-byte (raw-indices)
    (if raw-indices
        (assign
            indices-len (strlen raw-indices)
            (substr raw-indices (- indices-len 1) indices-len)
        )
        0x00
    )
)

(defun indices_to_bitfield (mylist)
    (single-byte (indices_to_bitfield_inner mylist 0))
)

(export (mod_hash (old_state move next_validation_hash bob_share previous_validation_hash
    mover_puzzle_hash waiter_puzzle_hash amount timeout max_move_size referee_hash)
    (@ state (bob_picks (alice_cards bob_cards) alice_commit)) me previous_validation_program mover_puzzle solution bob_card_selections)
    (if (not (= (strlen move) 18))
        (list SLASH () "E slash wrong move size" move)

        (assign
            alice_salted_picks (substr move 0 17)
            alice_picks (substr move 16 17)
            alice_card_selections (substr move 17 18)

            (alice_final_cards bob_final_cards) (split_cards_inner bob_picks bob_cards &rest (split_cards alice_picks alice_cards))

            alice_hand_value (onehandcalc (map list-to-pair (pull_out_cards alice_card_selections alice_final_cards)))

            (if (not bob_card_selections)
                ;; Assert we aren't running on chain
                (if (not previous_validation_program)
                    (list MAKE_MOVE (list bob_picks alice_card_selections alice_cards bob_cards alice_hand_value alice_final_cards bob_final_cards) bob_share)
                    (x "previous validation program was" previous_validation_program)
                )
                (assign
                    pulled_cards (pull_out_cards (indices_to_bitfield bob_card_selections) bob_final_cards)
                    result (list_compare alice_hand_value
                                        (onehandcalc (map list-to-pair pulled_cards)))
                    correct-mover-share
                        (if_any_fail
                            (= (sha256 alice_salted_picks) alice_commit)
                            (= (popcount alice_picks) 4)
                            (<= bob_share
                                (if (not result)
                                    (/ amount 2)
                                    (if (= result 1)
                                        amount
                                        0
                                    )
                                )
                            )
                            0
                            1
                        )

                    (if correct-mover-share
                        (list MAKE_MOVE (list bob_picks alice_card_selections alice_cards bob_cards alice_hand_value alice_final_cards bob_final_cards) bob_share)
                        (list SLASH () "E slash")
                    )
                )
            )
        )
    )
)
