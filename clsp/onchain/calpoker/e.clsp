(include *standard-cl-23*)

(import onchain.calpoker.onehandcalc)
(import onchain.calpoker.arrange_cards)
(import onchain.game_codes)
(import std.list_compare)
(import std.assert)
(import std.relops)
(import std.popcount)
(import std.if_any_fail)
(import std.and)
(import std.map)
(import std.li)

; Bob challenging
; state is (Bob's picks (alice_cards bob_cards) alice_commit)
; move is alice_salted_picks and alice's selections
; evidence is Bob's card selections

; TODO: move helper functions to another file
(defun list-to-pair ((a b)) (c a b))

(defun indices_to_bitfield_inner (mylist index)
    (if (not mylist)
        0
        (= (f mylist) index)
        (logior 1 (lsh (indices_to_bitfield_inner (r mylist) (+ index 1)) 1))
        (lsh (indices_to_bitfield_inner mylist (+ index 1)) 1)
    )
)

(defun single-byte (raw-indices)
    (if raw-indices
        (assign
            indices-len (strlen raw-indices)
            (substr raw-indices (- indices-len 1) indices-len)
        )
        0x00
    )
)

(defun indices_to_bitfield (mylist)
    (single-byte (indices_to_bitfield_inner mylist 0))
)

(export (mod_hash
    (MOVER_PUZZLE_HASH WAITER_PUZZLE_HASH TIMEOUT AMOUNT MOD_HASH NONCE
        MOVE MAX_MOVE_SIZE VALIDATION_INFO_HASH MOVER_SHARE PREVIOUS_VALIDATION_INFO_HASH)
        (bob_picks alice_cards bob_cards alice_commit) previous_validation_program mover_puzzle solution bob_card_selections)
    (if (not (= (strlen MOVE) 18))
        (list SLASH () "E slash wrong MOVE size" MOVE)

        (assign
            alice_salted_picks (substr MOVE 0 17)
            alice_picks (substr MOVE 16 17)
            alice_card_selections (substr MOVE 17 18)

            (alice_final_cards bob_final_cards) (split_cards_inner bob_picks bob_cards &rest (split_cards alice_picks alice_cards))

            alice_hand_value (onehandcalc (map list-to-pair (pull_out_cards alice_card_selections alice_final_cards)))

            (if_any_fail
                (= (sha256 alice_salted_picks) alice_commit)
                (= (popcount alice_picks) 4)
                (if (not bob_card_selections)
                    ;; Assert we aren't running on chain
                    (not WAITER_PUZZLE_HASH)
                    (assign
                        result (list_compare alice_hand_value (onehandcalc
                                (map list-to-pair (pull_out_cards bob_card_selections bob_final_cards))))
                        (<= MOVER_SHARE
                            (if (not result)
                                (/ AMOUNT 2)
                                (if (= result 1)
                                    AMOUNT
                                    0
                                )
                            )
                        )
                    )
                )
                (list SLASH () "E slash")
                (list MAKE_MOVE 0 (li bob_picks alice_card_selections (indices_to_bitfield alice_cards)
                    bob_cards alice_hand_value alice_final_cards bob_final_cards MOVER_SHARE) 0 "E move")
            )
        )
    )
)
