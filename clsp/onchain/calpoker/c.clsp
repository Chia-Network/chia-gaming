(include *standard-cl-23*)

(import std.assert)
(import std.shatree)
(import std.relops)
(import std.and)
(import std.print)
(import std.if_any_fail)
(import onchain.calpoker.d exposing (program_hash as dhash))
(import onchain.calpoker.make_cards)
(import onchain.game_codes)

; Bob challenging
; state is alice's commit and bob's seed
; move is alice's reveal of her card generating seed and her commit to which cards she's picking
; MOVE = [16] + [32]
; evidence is empty

;(export (@ all_args (mod_hash (old_state move new_validation_hash mover_share previous_validation_hash
;    mover_puzzle_hash waiter_puzzle_hash amount timeout max_move_size referee_hash)
;    (alice_commit bob_seed) me previous_calidation_program mover_puzzle solution evidence))
; alice_commit: commit to pre-image (for rnd)
; alice's new commit is a commit to discards that's not revealed yet.

(export (mod_hash
        (MOVER_PUZZLE_HASH WAITER_PUZZLE_HASH TIMEOUT AMOUNT MOD_HASH NONCE
            MOVE MAX_MOVE_SIZE VALIDATION_INFO_HASH MOVER_SHARE PREVIOUS_VALIDATION_INFO_HASH)
            state previous_validation_program mover_puzzle solution evidence)

    (if (not (= (strlen MOVE) 48))
        (list SLASH () "C" MOVE "wrong move length")

        (assign
            ;TODO print old_state
            new_state (print "new state from move C was" (c
                    (substr MOVE 16 48)
                    (print "show diagnostic output of cards" (make_cards (sha256 (substr MOVE 0 16) bob_seed AMOUNT)))
                ))
            alice_commit (f (print "original state into C was" state))
            bob_seed (f (r state))
            (if_any_fail
                (= (sha256 (substr MOVE 0 16)) alice_commit)
                (list SLASH () "C" MOVE "with alice commit" alice_commit MAX_MOVE_SIZE new_state)
                (list MAKE_MOVE dhash new_state 1 "C")
            )
        )
    )
)
