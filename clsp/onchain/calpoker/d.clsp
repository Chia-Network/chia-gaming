(include *standard-cl-23*)

(import onchain.calpoker.e exposing (program_hash as ehash))
(import onchain.calpoker.make_cards)
(import onchain.game_codes)
(import std.assert)
(import std.shatree)
(import std.popcount)
(import std.and)
(import std.if_any_fail)
(import std.print)

; Alice challenging
; state is the cards for both players and alice's card pick commitment
; MOVE is Bob's discards
; evidence is empty

(export (mod_hash
    (MOVER_PUZZLE_HASH WAITER_PUZZLE_HASH TIMEOUT AMOUNT MOD_HASH NONCE
        MOVE MAX_MOVE_SIZE VALIDATION_INFO_HASH MOVER_SHARE PREVIOUS_VALIDATION_INFO_HASH)
        (@ state (alice_commit alice_cards bob_cards)) previous_validation_program mover_puzzle solution evidence)
    (assign
        bob_discards (print (list "state at move D start was" state) MOVE)
        old_state (list alice_commit alice_cards bob_cards)
        new_state (list bob_discards alice_cards bob_cards alice_commit)
        (if_any_fail
            (= (strlen bob_discards) 1)
            (= (popcount bob_discards) 4)
            (list SLASH () "D" old_state bob_discards MAX_MOVE_SIZE)
            (list MAKE_MOVE ehash (print "output state from move D was" new_state) 18 "D")
        )
    )
)
