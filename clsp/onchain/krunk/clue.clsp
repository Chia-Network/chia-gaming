(include *standard-cl-23*)

(export clue_validate)
(import std.assert_fail)
(import onchain.krunk.krunk_make_clue exposing make_clue)

; Bob challenging
; state is (bob_guesses alice_clues guess_validate_hash dictionary_key alice_commit)
; move is an Alice clue or word reveal if hit
; evidence can be index where clue is wrong
; evidence can be exclusion range if Alice's committed word is not in the dictionary
(defun clue_validate (mod_hash (move new_validation_hash mover_share previous_validation_hash
    mover_puzzle_hash waiter_puzzle_hash amount timeout max_move_size referee_hash)
    (bob_guesses alice_clues guess_validation_hash @ tail (dictionary_key alice_commit))
    me previous_calidation_program mover_puzzle solution evidence)

    (if (= (strlen move)) 1
        ; alice gave a clue
        (if (= (len alice_clues) 4)
            (li SLASH 0)
            (li MOVE (li bob_guesses (c move alice_clues) &rest tail) 5)
        )
        ; alice did a reveal
        (if (= (strlen evidence) 1)
            ; Evidence is index of wrong clue
            (if (+ evidence 0)
                ; Guess has to have been correct or given a wrong clue
                (assign
                    old_bob_guess (index bob_guesses evidence)
                    (assert (or
                            ; old guess was correct
                            (= old_bob_guess (substr alice_commit 16 21))
                            ; old clue was wrong
                            (!= (make_clue old_bob_guess) (index alice_clues (- evidence 1))))
                        (li SLASH 0)
                    )
                )
                ; Last guess has to be wrong if it's the fifth guess otherwise it has to be right
                (assert (= (!= (len bob_guesses) 5) (= (f bob_guesses) (substr alice_commit 16 21))) (li SLASH 0))
            )
            evidence
            ; proof
            (assert
                (>= (substr move 0 5) (substr evidence 0 5))
                (<= (substr move 0 5) (substr evidence 5 10))
                (li SLASH (li (li AGGSIG_UNSAFE dictionary_key evidence)))
            )
            (if_any_fail
                (= (strlen move) 21)
                (= alice_commit (sha256 move))
                (= mover_share (* (/ amount 100) (index (len bob_guesses) (li 100 100 20 5 1 0))))
                (li SLASH 0)
                (li MOVE 0 0 0)
            )
        )
    )
)
