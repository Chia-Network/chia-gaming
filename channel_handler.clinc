
; Peer wire protocol messages
; Chat - contains a human readable payload, does nothing
; Handshake 1
;   Launcher coin id
;   My pubkey for state coin
;   My pubkey for unroll coin
;   My pubkey for use in referee
;   My puzzle hash for rewards
;   My stack size
; Handshake 2
;   My pubkey for state coin
;   My pubkey for unroll coin
;   My pubkey for use in referee
;   My puzzle hash for rewards
;   My stack size
;   Initial unroll half signature
; Handshake 3
;   Initial unroll half signature
; Handshake 4
;   Offer
; Handshake 5
;   Offer completion
; Handshake 6
;   Ack seeing on chain
; Handshake 7
;   Ack seeing on chain
; Propose game
;   Game identifier
;   Player contribution
;   Nonce
; Reject Proposal
;   Nonce
; Request rejection of proposal - requires fast response
;   Nonce
; Request potato - requires fast response
; Give potato
;   Half signature of initiate unroll
;   Half signature of state rebut
;   Accept game proposal - requires fast response
;       proposal nonce
;   make move in game
;       Game nonce
;       Puzzle solution (whether closes out/new puzzle hash implicit)
;       Solution aggsig
;       Half signature of initiate unroll
;       Half signature of state rebut
; Message
;   Nonce
;   Message
; Initiate closeout
;   Can only be done when there are no pending games
;   Can only be done when posessing the potato
;   Half signature of direct payout
; Finish closeout
;   Half signature of direct payout
; Closeout seen on chain


; This layer assumes the local wallet always has a proper connection to a wallet.
; Wallet messages
; -> generate offer (funding amount, target puzzle hash, target coin amount)
; <- offer (bundle, target parent/launcher coin)
; <- generated offer succeeded
; <- generated offer failed
; -> finish offer (offer, launcher coin, output coin, my contribution)
; <- offer acceptance succeeded
; <- offer acceptance failed
; -> register coin interest (coin id, relative height)
; <- timeout hit (coin id, relative height)
; <- coin spent (coin id, conditions)
; -> post transaction (transaction, id)
; <- transaction succeeded (id)
; <- transaction failed (id)


; the UX has to do its own queries to the wallet to find out about available funds
; and full node connectivity status
;
; UX incoming messages:
; Start (bankroll size, games)
; Accept other side bankroll and games
; Start game (id, contribution, type, human_readable)
; accept (id)
; reject (id)
; move (id, move)
; shut down
;
; UX outgoing messages:
; Other side wants (their bankroll size, shared games)
; is_acceptable (id, readable)
; Game started (id)
; Game start failed (id)
; Game update (id, readable)
; Game ended (id, my split, opponent split)
; Error (readable)


; Game types database format
; 

; returns [(puzzle_hash amount first_player_handler second_player_handler initial_puzzle initial_first_player_share)]
; First player driver is my turn, second player driver is their turn type
; Message parsers take (message state amount) and return readable_info
(defun make_referee_makers (my_turn_driver their_turn_driver whether_paired 
        initial_max_move_size initial_validator_program initial_validator_program_hash 
        initial_state initial_mover_share player_contribution
        timeout player_one_puzzle_hash player_two_puzzle_hash nonce))

; returns (MOVE readable new_puzzle_hash my_turn_coin_handler message) or
;       (ACCEPT readable puzzle_reveal my_share)
;       (SLASH puzzle_reveal slashing_coin_solution agg_sig) or
;       (SLASHED)
;       (TIMEOUDOUT my_share)
; messages are optional and mostly used for early reveals of pre-commits
(defun their_turn_referee_maker (my_inner_puzzle my_inner_solution_maker my_target_puzzle 
        conditions))

; returns (MOVE puzzle_reveal coin_solution agg_sig new_puzzle new_puzzle_hash new_coin_handler 
;       my_share message_parser) or
;       (ACCEPT puzzle_reveal my_share)
; In the move case if new_coin_handler is nil the timeout is clean and should be mutually agreeable
; message_parser takes (message state amount) and returns readable
; my_inner_solution_maker takes a shatree value of conditions and returns (solution aggsig)
(defun my_turn_referee_maker (my_inner_puzzle my_inner_solution_maker readable_move entropy))


; returns (public_key signer)
; The signer takes a value to be signed and returns an aggsig
(defun signer (private_key)
)

; returns a signer which takes a value to be signed and returns an aggsig which 
; needs to be combined with the rest of the signature
(defun partial_signer (my_private_key combined_public_key)
)

(defun add_public_keys (key1 key2)
)

(defun add_signatures (signature_1 signature_2)
)

(defun standard_puzzle (public_key)
)

; equivalent to (shatree (standard_puzzle public_key)) but much more efficient
(defun standard_puzzle_hash (public_key)
)

; returns a solution maker which takes a list of conditions and returns (solution aggsig)
(defun standard_puzzle_solution_maker (public_key signer)
)

; Miscellaneous
; -> inform me of local timeout (seconds)
; <- timeout hit (seconds)

; Factory takes (payout puzzle hash, game types database)
