
; Higher layer needs to use handshake message in a secure order
; Higher layer is cognizant of who has the potato, out of game balances, and 
; (game_id, amount, turn) when off chain and (game_id, amount, turn, coin_string, referee) when on chain
; for games in progress as well as having UX for them. It's responsible for 
; queueing up actions until after we have the potato
; Higher layer is also responsible for making sure there's a meeting of the minds before attempting to 
; start a game and checking that the game start attempt is one that it already agreed to.
;
; ChannelHandler()
; to handshake Alice and Bob agree on parameters and exchange pubkeys, then exchange initial unrolls, 
; and finally trade an offer and acceptance of creating the state channel
;
; (my_state_coin_pubkey_peer, my_unroll_coin_pubkey_peer, my_referee_puzzle_hash_peer) get_pubkeys()
;
; (initial_puzzle_hash_up, my_initial_channel_half_signature_peer) initiate(launcher_coin_string, whether_we_start, 
;       their_state_pubkey, their_unroll_pubkey, their_referee_puzzle_hash, my_contribution, 
;       their_contribution) throws error
;
; void finish_handshake(their_initial_channel_half_signature) throws error
;
; (my_channel_half_signature_peer, my_unroll_half_signature_peer) send_potato_nil()
;
; void received_potato_nil(their_channel_half_signature, their_unroll_half_signature) throws error
;
; (my_channel_half_signature_peer, their_unroll_half_signature_peer) send_potato_start_game(my_contribution,
;       their_contribution, [(game_id, amount, game_handler, is_my_turn, timeout, initial_validation_puzzle, 
;       initial_validation_puzzle_hash, initial_state, initial_move, initial_max_move_size, initial_mover_share)])
;
; void received_potato_start_game(their_channel_half_signature, their_unroll_half_signature, [(game_id, amount, 
;       game_handler, is_my_turn, timeout, initial_validation_puzzle, initial_validation_puzzle_hash, 
;       initial_state, initial_move, initial_max_move_size, initial_mover_share)]) throws error
;
; (their_channel_half_signature_peer, their_unroll_half_signature_peer, move_peer, 
;       validation_info_hash_peer, max_move_size_peer, 
;       mover_share_peer) send_potato_move(game_id, readable_move)
;
; (readable_move_ux, message_peer) received_potato_move(their_channel_half_signature, their_unroll_half_signature,
;       game_id, move, validation_info_hash, max_move_size, mover_share) throws error
;
; readable_ux received_message(game_id, message) throws error
;
; (my_channel_half_signature_peer, my_unroll_half_signature_peer, my_share_up) send_potato_accept(game_id)
;
; my_share_up received_potato_accept(their_channel_half_signature, their_unroll_half_signature, game_id) throws error
;
; (channel_puzzle_reveal_up, solution_up, my_half_signature_peer) send_potato_clean_shutdown(conditions) 
;
; (channel_puzzle_reveal_up, solution_up, aggsig_up) received_potato_clean_shutdown(their_channel_half_signature, 
;       conditions) throws error
;
; (channel_puzzle_up, solution_up, aggsig_up) get_unroll_spend()
;
; (unroll_coin_string_up, puzzle_reveal_up, solution_up, aggsig_up, 
;       whether_has_timeout_up) state_channel_spent(conditions) throws error
;
; (my_clean_reward_coin_string_up, [(game_id_up, coin_string_up, referee_up)], game_id_cancelled_ux, game_id_to_move_up, 
;       game_id_of_accept_up) unroll_coin_spent(conditions) throws error
;
; (shared_puzzle_reveal_up, [(coin_string_up, solution_up)], aggsig_up, result_coin_string_up)
;       spend_reward_coins([coin_string], target_puzzle_hash)

; ChannelHandler fields
; state channel coin id
; [(game_id, puzzle_hash, amount, referee)]
; my out of game balance
; thir out of game balance
; my channel coin private key
; my unroll coin private key
; my referee private key
; opponent channel coin public key
; opponent unroll coin public key
; opponent referee puzzle hash
; whether I have the potato
; current state number
; last state channel aggsig
; last unroll aggsig
; game_id of move I just made (nil if I have potato)
; game_id of game I just made (nil if I have potato)
; game_id of game I just accepted (nil if I have potato)
; referee of game I just accepted (nil if I have potato)
; next nonce number


; RefereeHandler(amount, game_handler, is_my_turn, timeout, validation_puzzle, validation_puzzle_hash, 
;       initial_state, initial_move, initial_max_move_size, initial_mover_share, 
;       my_private_key, their_puzzle_hash, nonce)
;
; puzzle_hash get_initial_puzzle_hash()
; 
; (puzzle_hash_for_unroll, move, validation_info_hash, max_move_size, mover_share) my_turn_make_move(readable_move)
;
; called after my_turn_make_move() and reiterates what it was told
; (puzzle_reveal, solution, aggsig, new_coin_string) get_transaction_for_move(coin_string)
;
; takes into account whose turn it is
; my_share get_my_share()
;
; In the case of an unknown my turn coin spend it should be compared to a timeout
; takes into account whose turn it is
; (puzzle_reveal, solution, aggsig, my_reward_coin_string) get_timeout_transaction(coin_string)
;
; (puzzle_hash_for_unroll, readable_move, message) their_turn_move_off_chain (move, validation_info_hash, max_move_size, 
;       mover_share) throws error
;
; ((TIMEDOUT, my_reward_coin_id) or (MOVED, new_coin_string, readable) or (SLASH, new_coin_string, puzzle_reveal, 
;       solution, aggsig, my_reward_coin_id)) their_turn_coin_spent(coin_string, conditions) throws error
; 
; readable message_arrived(message) throws error

; RefereeHandler fields
; 
; shared/their turn fields
;
; my_private_key
; their_puzzle_hash
; amount
; timeout
; nonce
; previous_validation_info_hash
; their_last_move
; mover_share
; max_move_size
; validation_program
; validation_program_hash
; state
; driver
; is_my_turn
; previous_puzzle_reveal
; previous_readable_move

; my turn fields
;
; puzzle_reveal
; move
; new_validation_info_hash
; mover_share


; My turn driver takes (readable_new_move amount last_state last_move last_mover_share entropy) and returns
;       (waiting_driver move validation_program validation_program_hash state max_move_size mover_share
;       message_parser)
; Message parser takes (message amount state move mover_share) and returns error or readable_info
;
; their turn driver takes (amount last_state last_move last_mover_share 
;       new_move new_validation_info_hash new_max_move_size new_mover_share) and returns
;       (MAKE_MOVE moving_driver readable_info message) or
;       (SLASH evidence aggsig)


;; All this stuff belongs in src/common/standard_coin.rs

; returns puzzle
;; [X]
(defun make_standard_puzzle (public_key))

; returns puzzle_hash
; equivalent to (shatree (standard_puzzle public_key)) but much more efficient
;; [X]
(defun make_standard_puzzle_hash (public_key))

; returns (solution aggsig)
;; [X]
(defun standard_solution (private_key coin_id conditions))

; returns (solution aggsig)
;; [X]
(defun standard_solution_partial (private_key coin_id conditions aggregate_public_key))

; returns signature
;; [X]
(defun unsafe_sign (private_key value))

; returns signature
;; [X]
(defun unsafe_sign_partial (private_key value aggregate_public_key))

; returns public_key
;; [X]
(defun private_to_public_key (mykey))

; returns public_key
;; [X]
(defun aggregate_public_keys (key1 key2))

; returns signature
;; [X]
(defun aggregate_signatures (signature_1 signature_2))
